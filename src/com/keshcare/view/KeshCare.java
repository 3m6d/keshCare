/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.keshcare.view;

import com.keshcare.controller.Controller;
import com.keshcare.model.Product;
import com.keshcare.util.StringUtil;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dipawoli malla
 */
public class KeshCare extends javax.swing.JFrame {

    private final ArrayList<Product> productList = new ArrayList<>();
    private final Controller controller = new Controller(productList);

    /**
     * Creates new form KeshCare2
     */
    public KeshCare() {
        initComponents();

        // Initialize productList
        productList.add(new Product(1, "Yachu Hair Oil", "Bhingraj, and 32 others", "Hair Oil", 250, 2500, "Bhumi MDR Industries Pvt Ltd", 2021));
        productList.add(new Product(2, "WOW Skin Science Onion and Black Seed Shampoo", "Onion Extract, Black Seed Oil, Wheatgerm Oil", "Shampoo", 580, 580, "WOW Skin Science", 2014));
        productList.add(new Product(3, "Mamaearth Onion Scalp Serum", "Onion Extract, Redensyl, Keratin", "Serum", 50, 1850, "mamaearth", 2017));
        productList.add(new Product(4, "Coconut Oil", "Coconut Oil", "Hair Oil", 170, 500, "Parachute", 1919));
        productList.add(new Product(5, "Bhringraj Oil", "Bhringraj, Amla, Brahmi", "Hair Oil", 200, 1500, "Dabur", 1884));
        productList.add(new Product(6, "Tresemme Keratin Smooth Shampoo", "Keratin, Argan Oil", "Shampoo", 580, 750, "Tresemme", 1947));
        productList.add(new Product(7, "L'Oreal Paris Total Repair 5 Conditioner", "Ceramide, Pro-Keratin", "Shampoo", 175, 699, "L'Oreal Paris", 1909));
        productList.add(new Product(8, "Herbal Essences Bio:Renew Argan Oil of Morocco Hair Mask", "Argan Oil, Aloe, Sea Kelp", "Hair Oil", 250, 1200, "Herbal Essences", 1971));
        productList.add(new Product(9, "Garnier Fructis Sleek & Shine Anti-Frizz Serum", "Argan Oil, Vitamin E", "Serum", 100, 900, "Garnier", 1904));
        productList.add(new Product(10, "Pantene Pro-V Hair Fall Control Conditioner", "Pro-Vitamin B5, Fermented Rice Water", "Shampoo", 180, 650, "Pantene", 1945));
        productList.add(new Product(11, "The Body Shop Ginger Scalp Care Shampoo", "Ginger Extract, Birch Bark Extract", "Shampoo", 400, 1200, "The Body Shop", 1976));
        productList.add(new Product(12, "Kérastase Elixir Ultime Hair Oil", "Maize Oil, Argan Oil, Camellia Oil", "Hair Oil", 100, 3000, "Kérastase", 1964));
        productList.add(new Product(13, "Olaplex No.3 Hair Perfector", "Bis-Aminopropyl Diglycol Dimaleate", "Serum", 100, 2800, "Olaplex", 2014));
        productList.add(new Product(14, "Aveda Nutriplenish Leave-In Conditioner", "Pomegranate Oil, Coconut Oil", "Shampoo", 200, 2500, "Aveda", 1978));
        productList.add(new Product(15, "Moroccanoil Intense Hydrating Mask", "Argan Oil, Linseed Extract", "Serum", 250, 2200, "Moroccanoil", 2006));

        setSize(1069, 670);
        // Initially hide the main panel and add panel
        pnMain.setVisible(false);
        pnAdd.setVisible(false);

        // Show the welcome panel and set its bounds
        pnWelcome.setVisible(true);
        pnWelcome.setBounds(000, 0, 1069, 630);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnWelcome = new javax.swing.JPanel();
        jbWelcome = new javax.swing.JButton();
        pnMain = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblmainTable = new javax.swing.JTable();
        jlKeshCareTitle = new javax.swing.JLabel();
        jlSubtitle = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        jbUpdate = new javax.swing.JButton();
        SortPriceButton = new javax.swing.JButton();
        cbSortCategory = new javax.swing.JComboBox<>();
        jbDelete = new javax.swing.JButton();
        jlLogo = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        SortProductNumButton = new javax.swing.JButton();
        jtSearch = new javax.swing.JTextField();
        SortBrandNameButton = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        pnAdd = new javax.swing.JPanel();
        tfKeyAdd = new javax.swing.JTextField();
        tfPriceAdd = new javax.swing.JTextField();
        cbCategoryAdd = new javax.swing.JComboBox<>();
        priceAdd = new javax.swing.JLabel();
        productNoAdd = new javax.swing.JLabel();
        brandNameAdd = new javax.swing.JLabel();
        keyIngredientsAdd = new javax.swing.JLabel();
        categoryAdd = new javax.swing.JLabel();
        tfProductNoAdd = new javax.swing.JTextField();
        tfBrandNameAdd = new javax.swing.JTextField();
        manufacturer1 = new javax.swing.JLabel();
        tfManufacturerAdd = new javax.swing.JTextField();
        quantity1 = new javax.swing.JLabel();
        tfQuantityAdd = new javax.swing.JTextField();
        mfdDate1 = new javax.swing.JLabel();
        tfMfdDateAdd = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        addButton3 = new javax.swing.JButton();
        addBackButton = new javax.swing.JButton();
        pnUpdate = new javax.swing.JPanel();
        tfKeyAddUpdate = new javax.swing.JTextField();
        tfPriceUpdate = new javax.swing.JTextField();
        cbCategoryUpdate = new javax.swing.JComboBox<>();
        updatePrice = new javax.swing.JLabel();
        updateProductNo = new javax.swing.JLabel();
        updateBrandName = new javax.swing.JLabel();
        updateKeyIngredients = new javax.swing.JLabel();
        updateCategory = new javax.swing.JLabel();
        tfProductNoUpdate = new javax.swing.JTextField();
        tfBrandNameUpdate = new javax.swing.JTextField();
        updateManufacturer = new javax.swing.JLabel();
        tfManufacturerUpdate = new javax.swing.JTextField();
        updateQuantity = new javax.swing.JLabel();
        tfQuantityUpdate = new javax.swing.JTextField();
        updateMfdDate = new javax.swing.JLabel();
        tfMfdDateUpdate = new javax.swing.JTextField();
        UpdateButton = new javax.swing.JButton();
        title = new javax.swing.JLabel();
        logo = new javax.swing.JLabel();
        updateBackButton = new javax.swing.JButton();
        updateClearButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        pnWelcome.setBackground(new java.awt.Color(9, 58, 51));
        pnWelcome.setPreferredSize(new java.awt.Dimension(1069, 630));

        jbWelcome.setBackground(new java.awt.Color(242, 244, 245));
        jbWelcome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/keshcare/resources/keshWelcome.png"))); // NOI18N
        jbWelcome.setPreferredSize(new java.awt.Dimension(1069, 630));
        jbWelcome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbWelcomeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnWelcomeLayout = new javax.swing.GroupLayout(pnWelcome);
        pnWelcome.setLayout(pnWelcomeLayout);
        pnWelcomeLayout.setHorizontalGroup(
            pnWelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jbWelcome, javax.swing.GroupLayout.DEFAULT_SIZE, 1075, Short.MAX_VALUE)
        );
        pnWelcomeLayout.setVerticalGroup(
            pnWelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jbWelcome, javax.swing.GroupLayout.DEFAULT_SIZE, 637, Short.MAX_VALUE)
        );

        getContentPane().add(pnWelcome);
        pnWelcome.setBounds(1351, 746, 1069, 630);

        pnMain.setBackground(new java.awt.Color(0, 102, 102));
        pnMain.setForeground(new java.awt.Color(255, 255, 255));
        pnMain.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        pnMain.setPreferredSize(new java.awt.Dimension(1069, 630));

        tblmainTable.setBackground(new java.awt.Color(0, 51, 51));
        tblmainTable.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tblmainTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        tblmainTable.setForeground(new java.awt.Color(153, 255, 204));
        tblmainTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", "Yachu Hair Oil", "Bhingraj, and 32 others", "Hair Oil", "2500", "250", "Bhumi MDR Industries Pvt Ltd", "2021"},
                {"2", "WOW Skin Science Onion and Black Seed Shampoo", "Onion Extract, Black Seed Oil, Wheatgerm Oil", "Shampoo", "580", "580", "WOW Skin Science", "2014"},
                {"3", "Mamaearth Onion Scalp Serum", "Onion Extract, Redensyl, Keratin", "Hair Serum", "1850", "50", "mamaearth", "2017"},
                {"4", "Coconut Oil	", "Coconut Oil	", "Hair Oil", "500", "170", "Parachute", "1919"},
                {"5", "Bhringraj Oil	", "Bhringraj, Amla, Brahmi", "Ayurvedic Oil", "1500", "200", "Dabur", "1884"},
                {"6", "Tresemme Keratin Smooth Shampoo", "Keratin, Argan Oil", "Shampoo", "750", "580", "Tresemme", "1947"},
                {"7", "L'Oreal Paris Total Repair 5 Conditioner", "Ceramide, Pro-Keratin", "Shampoo", "699", "175", "L'Oreal Paris", "1979"},
                {"8", "Herbal Essences Bio:Renew Argan Oil ", "Argan Oil, Aloe, Sea Kelp", "Hair Oil", "1200", "250", "Herbal Essence", "1979"},
                {"9", "Garnier Fructis Sleek & Shine Anti-Frizz Serum", "Argan Oil, Vitamin E", "Serum", "900", "100", "Garnier", "1904"},
                {"10", "Pantene Pro-V Hair Fall Control Conditioner", "Pro-Vitamin B5, Fermented Rice Water", "Shampoo", "650", "180", "Pantene", "1945"},
                {"11", "The Body Shop Ginger Scalp Care Shampoo", "Ginger Extract, Birch Bark Extract", "Shampoo", "1200", "400", "The Body Shop", "1976"},
                {"12", "Kérastase Elixir Ultime Hair Oil", "Maize Oil, Argan Oil, Camellia Oil", "Hair Oil", "3000", "100", "Kérastase", "1964"},
                {"13", "Olaplex No.3 Hair Perfector", "Bis-Aminopropyl Diglycol Dimaleate", "Serum", "2800", "140", "Olaplex", "2014"},
                {"14", "Aveda Nutriplenish Leave-In Conditioner", "Pomegranate Oil, Coconut Oil", "Shampoo", "2500", "200", "Aveda", "1978"},
                {"15", "Moroccanoil Intense Hydrating Serum", "Argan Oil, Linseed Extract", "Serum", "2200", "250", "Moroccanoil", null}
            },
            new String [] {
                "Product Num", "Brand Name", "Key Ingredients", "Category", "Price (NPR)", "Quantity(ml)", "Manufacturer", "Mfd Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblmainTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblmainTable.setGridColor(new java.awt.Color(255, 255, 255));
        tblmainTable.setSelectionBackground(new java.awt.Color(0, 0, 0));
        tblmainTable.setSelectionForeground(new java.awt.Color(204, 204, 255));
        tblmainTable.setShowGrid(true);
        tblmainTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblmainTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblmainTable);
        if (tblmainTable.getColumnModel().getColumnCount() > 0) {
            tblmainTable.getColumnModel().getColumn(0).setMinWidth(50);
            tblmainTable.getColumnModel().getColumn(0).setMaxWidth(90);
            tblmainTable.getColumnModel().getColumn(1).setMinWidth(120);
            tblmainTable.getColumnModel().getColumn(1).setPreferredWidth(200);
            tblmainTable.getColumnModel().getColumn(1).setMaxWidth(250);
            tblmainTable.getColumnModel().getColumn(2).setMinWidth(100);
            tblmainTable.getColumnModel().getColumn(2).setPreferredWidth(200);
            tblmainTable.getColumnModel().getColumn(2).setMaxWidth(250);
            tblmainTable.getColumnModel().getColumn(3).setMinWidth(80);
            tblmainTable.getColumnModel().getColumn(3).setPreferredWidth(80);
            tblmainTable.getColumnModel().getColumn(3).setMaxWidth(150);
            tblmainTable.getColumnModel().getColumn(4).setMinWidth(40);
            tblmainTable.getColumnModel().getColumn(4).setPreferredWidth(90);
            tblmainTable.getColumnModel().getColumn(4).setMaxWidth(90);
            tblmainTable.getColumnModel().getColumn(5).setMinWidth(40);
            tblmainTable.getColumnModel().getColumn(5).setPreferredWidth(90);
            tblmainTable.getColumnModel().getColumn(5).setMaxWidth(90);
            tblmainTable.getColumnModel().getColumn(6).setMinWidth(90);
            tblmainTable.getColumnModel().getColumn(6).setPreferredWidth(80);
            tblmainTable.getColumnModel().getColumn(6).setMaxWidth(150);
            tblmainTable.getColumnModel().getColumn(7).setMinWidth(50);
            tblmainTable.getColumnModel().getColumn(7).setPreferredWidth(40);
            tblmainTable.getColumnModel().getColumn(7).setMaxWidth(90);
        }

        jlKeshCareTitle.setBackground(new java.awt.Color(102, 204, 255));
        jlKeshCareTitle.setFont(new java.awt.Font("Arial", 0, 90)); // NOI18N
        jlKeshCareTitle.setForeground(new java.awt.Color(255, 255, 255));
        jlKeshCareTitle.setText("KeshCare");

        jlSubtitle.setFont(new java.awt.Font("Arial", 0, 32)); // NOI18N
        jlSubtitle.setForeground(new java.awt.Color(0, 255, 204));
        jlSubtitle.setText("Your Guide to  Healthy Hair");

        addButton.setBackground(new java.awt.Color(204, 204, 255));
        addButton.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        addButton.setForeground(new java.awt.Color(0, 102, 102));
        addButton.setText("ADD HAIR PRODUCT");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        jbUpdate.setBackground(new java.awt.Color(204, 204, 255));
        jbUpdate.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jbUpdate.setForeground(new java.awt.Color(0, 102, 102));
        jbUpdate.setText("UPDATE HAIR PRODUCT");
        jbUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbUpdateActionPerformed(evt);
            }
        });

        SortPriceButton.setBackground(new java.awt.Color(204, 204, 255));
        SortPriceButton.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        SortPriceButton.setForeground(new java.awt.Color(0, 102, 102));
        SortPriceButton.setText("Sort By Price Range (High to Low)");
        SortPriceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortPriceButtonActionPerformed(evt);
            }
        });

        cbSortCategory.setBackground(new java.awt.Color(204, 204, 255));
        cbSortCategory.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        cbSortCategory.setForeground(new java.awt.Color(0, 102, 102));
        cbSortCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sort By Hair Oil", "Sort By Serum", "Sort By Shampoo" }));
        cbSortCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSortCategoryActionPerformed(evt);
            }
        });

        jbDelete.setBackground(new java.awt.Color(204, 204, 255));
        jbDelete.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jbDelete.setForeground(new java.awt.Color(0, 102, 102));
        jbDelete.setText("DELETE HAIR PRODUCT");
        jbDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDeleteActionPerformed(evt);
            }
        });

        jlLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/keshcare/resources/keshCareFinal.png"))); // NOI18N

        searchButton.setBackground(new java.awt.Color(0, 102, 102));
        searchButton.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        searchButton.setForeground(new java.awt.Color(0, 102, 102));
        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/keshcare/resources/Search.png"))); // NOI18N
        searchButton.setBorder(null);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        SortProductNumButton.setBackground(new java.awt.Color(204, 204, 255));
        SortProductNumButton.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        SortProductNumButton.setForeground(new java.awt.Color(0, 102, 102));
        SortProductNumButton.setText("Sort By Product Num Descending");
        SortProductNumButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortProductNumButtonActionPerformed(evt);
            }
        });

        SortBrandNameButton.setBackground(new java.awt.Color(204, 204, 255));
        SortBrandNameButton.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        SortBrandNameButton.setForeground(new java.awt.Color(0, 102, 102));
        SortBrandNameButton.setText("Sort By Brand Name A-Z");
        SortBrandNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortBrandNameButtonActionPerformed(evt);
            }
        });

        jTextField1.setBackground(new java.awt.Color(0, 102, 102));
        jTextField1.setForeground(new java.awt.Color(255, 255, 255));
        jTextField1.setText("Enter Brand Name to search");
        jTextField1.setBorder(null);
        jTextField1.setOpaque(true);
        jTextField1.setVerifyInputWhenFocusTarget(false);

        javax.swing.GroupLayout pnMainLayout = new javax.swing.GroupLayout(pnMain);
        pnMain.setLayout(pnMainLayout);
        pnMainLayout.setHorizontalGroup(
            pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnMainLayout.createSequentialGroup()
                        .addGroup(pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnMainLayout.createSequentialGroup()
                                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jbUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jbDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1057, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnMainLayout.createSequentialGroup()
                        .addGroup(pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnMainLayout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchButton))
                            .addGroup(pnMainLayout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnMainLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(SortBrandNameButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(SortProductNumButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(SortPriceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cbSortCategory, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(67, 67, 67))
                            .addGroup(pnMainLayout.createSequentialGroup()
                                .addGroup(pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jlKeshCareTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jlSubtitle))
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );
        pnMainLayout.setVerticalGroup(
            pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMainLayout.createSequentialGroup()
                .addGroup(pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnMainLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(SortProductNumButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SortBrandNameButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbSortCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SortPriceButton)
                        .addGap(29, 29, 29))
                    .addGroup(pnMainLayout.createSequentialGroup()
                        .addGroup(pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnMainLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jlKeshCareTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jlSubtitle)))
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(jbUpdate)
                    .addComponent(jbDelete))
                .addGap(61, 61, 61))
        );

        getContentPane().add(pnMain);
        pnMain.setBounds(0, 0, 1070, 630);

        pnAdd.setBackground(new java.awt.Color(0, 102, 102));
        pnAdd.setPreferredSize(new java.awt.Dimension(1069, 630));

        tfKeyAdd.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tfKeyAdd.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        tfPriceAdd.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tfPriceAdd.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        cbCategoryAdd.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hair Oil", "Shampoo", "Serum" }));
        cbCategoryAdd.setName(""); // NOI18N

        priceAdd.setBackground(new java.awt.Color(33, 135, 94));
        priceAdd.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        priceAdd.setForeground(new java.awt.Color(255, 255, 255));
        priceAdd.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        priceAdd.setText("Price ");
        priceAdd.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(33, 135, 94)));
        priceAdd.setIconTextGap(5);
        priceAdd.setOpaque(true);

        productNoAdd.setBackground(new java.awt.Color(33, 135, 94));
        productNoAdd.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        productNoAdd.setForeground(new java.awt.Color(255, 255, 255));
        productNoAdd.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        productNoAdd.setText("Product No.");
        productNoAdd.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(33, 135, 94)));
        productNoAdd.setIconTextGap(5);
        productNoAdd.setOpaque(true);

        brandNameAdd.setBackground(new java.awt.Color(33, 135, 94));
        brandNameAdd.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        brandNameAdd.setForeground(new java.awt.Color(255, 255, 255));
        brandNameAdd.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        brandNameAdd.setText("Brand Name");
        brandNameAdd.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(33, 135, 94)));
        brandNameAdd.setIconTextGap(5);
        brandNameAdd.setOpaque(true);

        keyIngredientsAdd.setBackground(new java.awt.Color(33, 135, 94));
        keyIngredientsAdd.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        keyIngredientsAdd.setForeground(new java.awt.Color(255, 255, 255));
        keyIngredientsAdd.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        keyIngredientsAdd.setText("Key Ingredients");
        keyIngredientsAdd.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(33, 135, 94)));
        keyIngredientsAdd.setIconTextGap(5);
        keyIngredientsAdd.setOpaque(true);

        categoryAdd.setBackground(new java.awt.Color(33, 135, 94));
        categoryAdd.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        categoryAdd.setForeground(new java.awt.Color(255, 255, 255));
        categoryAdd.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        categoryAdd.setText("Category");
        categoryAdd.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(33, 135, 94)));
        categoryAdd.setIconTextGap(5);
        categoryAdd.setOpaque(true);

        tfProductNoAdd.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tfProductNoAdd.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        tfBrandNameAdd.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tfBrandNameAdd.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        manufacturer1.setBackground(new java.awt.Color(33, 135, 94));
        manufacturer1.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        manufacturer1.setForeground(new java.awt.Color(255, 255, 255));
        manufacturer1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        manufacturer1.setText("Manufacturer");
        manufacturer1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(33, 135, 94)));
        manufacturer1.setIconTextGap(5);
        manufacturer1.setOpaque(true);

        tfManufacturerAdd.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tfManufacturerAdd.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        quantity1.setBackground(new java.awt.Color(33, 135, 94));
        quantity1.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        quantity1.setForeground(new java.awt.Color(255, 255, 255));
        quantity1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        quantity1.setText("Quantity");
        quantity1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(33, 135, 94)));
        quantity1.setIconTextGap(5);
        quantity1.setOpaque(true);

        tfQuantityAdd.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tfQuantityAdd.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        mfdDate1.setBackground(new java.awt.Color(33, 135, 94));
        mfdDate1.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        mfdDate1.setForeground(new java.awt.Color(255, 255, 255));
        mfdDate1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mfdDate1.setText("Mfd Date");
        mfdDate1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(33, 135, 94)));
        mfdDate1.setIconTextGap(5);
        mfdDate1.setOpaque(true);

        tfMfdDateAdd.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tfMfdDateAdd.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 45)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Kesh Care Add");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/keshcare/resources/keshCareHair.png"))); // NOI18N

        addButton3.setBackground(new java.awt.Color(204, 204, 255));
        addButton3.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        addButton3.setForeground(new java.awt.Color(0, 102, 102));
        addButton3.setText("Add your hair data");
        addButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButton3ActionPerformed(evt);
            }
        });

        addBackButton.setBackground(new java.awt.Color(204, 204, 255));
        addBackButton.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        addBackButton.setForeground(new java.awt.Color(0, 102, 102));
        addBackButton.setText("Back");
        addBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBackButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnAddLayout = new javax.swing.GroupLayout(pnAdd);
        pnAdd.setLayout(pnAddLayout);
        pnAddLayout.setHorizontalGroup(
            pnAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnAddLayout.createSequentialGroup()
                .addGroup(pnAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnAddLayout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(147, 147, 147)
                        .addGroup(pnAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnAddLayout.createSequentialGroup()
                                .addGroup(pnAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(mfdDate1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(priceAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(categoryAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(manufacturer1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(quantity1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(keyIngredientsAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(35, 35, 35)
                                .addGroup(pnAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfKeyAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbCategoryAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfPriceAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfQuantityAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfManufacturerAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfMfdDateAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(pnAddLayout.createSequentialGroup()
                                .addGroup(pnAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(productNoAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(brandNameAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(36, 36, 36)
                                .addGroup(pnAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tfBrandNameAdd)
                                    .addComponent(tfProductNoAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnAddLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(addButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(111, 111, 111))
        );
        pnAddLayout.setVerticalGroup(
            pnAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnAddLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(pnAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(pnAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnAddLayout.createSequentialGroup()
                        .addGroup(pnAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfProductNoAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnAddLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(productNoAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(pnAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfBrandNameAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(brandNameAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tfKeyAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(keyIngredientsAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(categoryAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbCategoryAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(priceAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfPriceAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfQuantityAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quantity1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(manufacturer1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfManufacturerAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mfdDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfMfdDateAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(pnAdd);
        pnAdd.setBounds(2899, 1028, 1069, 630);

        pnUpdate.setBackground(new java.awt.Color(9, 58, 51));

        tfKeyAddUpdate.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tfKeyAddUpdate.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        tfPriceUpdate.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tfPriceUpdate.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        cbCategoryUpdate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hair Oil", "Shampoo", "Serum" }));
        cbCategoryUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        updatePrice.setBackground(new java.awt.Color(51, 27, 7));
        updatePrice.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        updatePrice.setForeground(new java.awt.Color(255, 255, 255));
        updatePrice.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        updatePrice.setText("Price ");
        updatePrice.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(33, 135, 94)));
        updatePrice.setIconTextGap(5);
        updatePrice.setOpaque(true);

        updateProductNo.setBackground(new java.awt.Color(51, 27, 7));
        updateProductNo.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        updateProductNo.setForeground(new java.awt.Color(255, 255, 255));
        updateProductNo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        updateProductNo.setText("Product No.");
        updateProductNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(33, 135, 94)));
        updateProductNo.setIconTextGap(5);
        updateProductNo.setOpaque(true);

        updateBrandName.setBackground(new java.awt.Color(51, 27, 7));
        updateBrandName.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        updateBrandName.setForeground(new java.awt.Color(255, 255, 255));
        updateBrandName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        updateBrandName.setText("Brand Name");
        updateBrandName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(33, 135, 94)));
        updateBrandName.setIconTextGap(5);
        updateBrandName.setOpaque(true);

        updateKeyIngredients.setBackground(new java.awt.Color(51, 27, 7));
        updateKeyIngredients.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        updateKeyIngredients.setForeground(new java.awt.Color(255, 255, 255));
        updateKeyIngredients.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        updateKeyIngredients.setText("Key Ingredients");
        updateKeyIngredients.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(33, 135, 94)));
        updateKeyIngredients.setIconTextGap(5);
        updateKeyIngredients.setOpaque(true);

        updateCategory.setBackground(new java.awt.Color(51, 27, 7));
        updateCategory.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        updateCategory.setForeground(new java.awt.Color(255, 255, 255));
        updateCategory.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        updateCategory.setText("Category");
        updateCategory.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(33, 135, 94)));
        updateCategory.setIconTextGap(5);
        updateCategory.setOpaque(true);

        tfProductNoUpdate.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tfProductNoUpdate.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        tfBrandNameUpdate.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tfBrandNameUpdate.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        updateManufacturer.setBackground(new java.awt.Color(51, 27, 7));
        updateManufacturer.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        updateManufacturer.setForeground(new java.awt.Color(255, 255, 255));
        updateManufacturer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        updateManufacturer.setText("Manufacturer");
        updateManufacturer.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(33, 135, 94)));
        updateManufacturer.setIconTextGap(5);
        updateManufacturer.setOpaque(true);

        tfManufacturerUpdate.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tfManufacturerUpdate.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        updateQuantity.setBackground(new java.awt.Color(51, 27, 7));
        updateQuantity.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        updateQuantity.setForeground(new java.awt.Color(255, 255, 255));
        updateQuantity.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        updateQuantity.setText("Quantity");
        updateQuantity.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(33, 135, 94)));
        updateQuantity.setIconTextGap(5);
        updateQuantity.setOpaque(true);

        tfQuantityUpdate.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tfQuantityUpdate.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        updateMfdDate.setBackground(new java.awt.Color(51, 27, 7));
        updateMfdDate.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        updateMfdDate.setForeground(new java.awt.Color(255, 255, 255));
        updateMfdDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        updateMfdDate.setText("Mfd Date");
        updateMfdDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(33, 135, 94)));
        updateMfdDate.setIconTextGap(5);
        updateMfdDate.setOpaque(true);

        tfMfdDateUpdate.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tfMfdDateUpdate.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        UpdateButton.setBackground(new java.awt.Color(204, 204, 255));
        UpdateButton.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        UpdateButton.setForeground(new java.awt.Color(0, 102, 102));
        UpdateButton.setText("Update your hair data");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        title.setFont(new java.awt.Font("Arial", 0, 45)); // NOI18N
        title.setForeground(new java.awt.Color(255, 255, 255));
        title.setText("Kesh Care Update");

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/keshcare/resources/KeshCareHair2.png"))); // NOI18N

        updateBackButton.setBackground(new java.awt.Color(204, 204, 255));
        updateBackButton.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        updateBackButton.setForeground(new java.awt.Color(0, 102, 102));
        updateBackButton.setText("Back");
        updateBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBackButtonActionPerformed(evt);
            }
        });

        updateClearButton.setBackground(new java.awt.Color(204, 204, 255));
        updateClearButton.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        updateClearButton.setForeground(new java.awt.Color(0, 102, 102));
        updateClearButton.setText("Clear");
        updateClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateClearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnUpdateLayout = new javax.swing.GroupLayout(pnUpdate);
        pnUpdate.setLayout(pnUpdateLayout);
        pnUpdateLayout.setHorizontalGroup(
            pnUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnUpdateLayout.createSequentialGroup()
                .addGroup(pnUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnUpdateLayout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(logo, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 63, 63)
                        .addGroup(pnUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnUpdateLayout.createSequentialGroup()
                                .addComponent(updateBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(updateClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(UpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(pnUpdateLayout.createSequentialGroup()
                                    .addGroup(pnUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(updateMfdDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(updateManufacturer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(35, 35, 35)
                                    .addGroup(pnUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(tfManufacturerUpdate)
                                        .addComponent(tfMfdDateUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(pnUpdateLayout.createSequentialGroup()
                                    .addGroup(pnUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(pnUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(updateQuantity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(updatePrice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(updateKeyIngredients, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(updateBrandName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(updateCategory, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(updateProductNo, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(35, 35, 35)
                                    .addGroup(pnUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(tfKeyAddUpdate)
                                        .addComponent(cbCategoryUpdate, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(tfPriceUpdate)
                                        .addComponent(tfQuantityUpdate)
                                        .addComponent(tfBrandNameUpdate)
                                        .addComponent(tfProductNoUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(pnUpdateLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        pnUpdateLayout.setVerticalGroup(
            pnUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnUpdateLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnUpdateLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(logo, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnUpdateLayout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(pnUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfProductNoUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateProductNo, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(updateBrandName, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfBrandNameUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(updateKeyIngredients, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfKeyAddUpdate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updateCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbCategoryUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updatePrice, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfPriceUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updateQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfQuantityUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(updateManufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfManufacturerUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(updateMfdDate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfMfdDateUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(79, Short.MAX_VALUE))
        );

        getContentPane().add(pnUpdate);
        pnUpdate.setBounds(2899, 1028, 938, 684);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbWelcomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbWelcomeActionPerformed
        // This method is called when the welcome button is clicked

        // Hide the welcome panel
        pnWelcome.setVisible(false);

        // Show the main panel
        pnMain.setVisible(true);
    }//GEN-LAST:event_jbWelcomeActionPerformed


    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // This method is called when the add button is clicked

        // Set the bounds of the add panel
        pnAdd.setBounds(0, 0, 1069, 630);

        // Hide the main panel
        pnMain.setVisible(false);

        // Show the add panel
        pnAdd.setVisible(true);
    }//GEN-LAST:event_addButtonActionPerformed

    /**
     * This method is triggered when the "Update" button is clicked. It checks
     * if a row is selected in the main table and then displays the update panel
     * for that row.
     *
     * @param evt The ActionEvent object containing details about the button
     * click event.
     */
    private void jbUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbUpdateActionPerformed
        // This method is called when the update button is clicked

        // Get the selected row from the main table
        int selectedRow = tblmainTable.getSelectedRow();

        // Check if a row is selected
        if (selectedRow == -1) {
            // Show a message if no row is selected
            JOptionPane.showMessageDialog(this,
                    "Please select a row to update.", "No Selection", JOptionPane.WARNING_MESSAGE);
        } else {
            // Set bounds for the update panel and make it visible
            pnUpdate.setBounds(0, 0, 1069, 630);
            pnMain.setVisible(false);
            pnUpdate.setVisible(true);
        }
    }//GEN-LAST:event_jbUpdateActionPerformed

    /**
     * This method is called when the "Sort Price" button is clicked. It sorts
     * the products by their price and updates the table to display the sorted
     * products.
     *
     * @param evt The ActionEvent object containing details about the button
     * click event.
     */

    private void SortPriceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortPriceButtonActionPerformed
        // This method is called when the sort price button is clicked

        // Sort the productList by price range
        controller.sortByPriceRange(productList);

        // Get the table model
        DefaultTableModel model = (DefaultTableModel) tblmainTable.getModel();

        // Clear the table
        model.setRowCount(0);

        // Add each product in the productList to the table
        for (Product product : productList) {
            model.addRow(new Object[]{
                product.getProductNum(),
                product.getBrandName(),
                product.getKeyIngredient(),
                product.getCategory(),
                product.getPrice(),
                product.getQuantity(),
                product.getManufacturer(),
                product.getMfdDate()});
        }
    }//GEN-LAST:event_SortPriceButtonActionPerformed

    /**
     * This method is called when a category is selected from the "Sort by
     * Category" combo box. It sorts the products based on the selected category
     * and updates the table to display the sorted products.
     *
     * @param evt The ActionEvent object containing details about the combo box
     * item selection event.
     */
    private void cbSortCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSortCategoryActionPerformed
        // This method is called when a category is selected from the sort by category combo box

        // Get the selected category
        String sortBy = (String) cbSortCategory.getSelectedItem();

        // Remove "Sort By " from the selected item
        sortBy = sortBy.replace("Sort By ", "");

        // Sort the productList by the selected category
        controller.sortByCategory(productList, sortBy);

        // Get the table model
        DefaultTableModel model = (DefaultTableModel) tblmainTable.getModel();

        // Clear the table
        model.setRowCount(0);

        // Add each product in the productList to the table
        for (Product product : productList) {
            model.addRow(new Object[]{
                product.getProductNum(),
                product.getBrandName(),
                product.getKeyIngredient(),
                product.getCategory(),
                product.getPrice(),
                product.getQuantity(),
                product.getManufacturer(),
                product.getMfdDate(),});

        }
    }//GEN-LAST:event_cbSortCategoryActionPerformed

    /**
     * This method is called when the "Delete" button is clicked. It deletes the
     * selected product from the table and the productList after confirming with
     * the user.
     *
     * @param evt The ActionEvent object containing details about the button
     * click event.
     */
    private void jbDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDeleteActionPerformed
        // This block of code is responsible for deleting a product from the table and the productList

// Get the selected row from the main table
        int selectedRow = tblmainTable.getSelectedRow();

// Check if a row is selected
        if (selectedRow == -1) {
            // Show a message if no row is selected
            JOptionPane.showMessageDialog(this, "Please select a row to delete.",
                    "No Selection", JOptionPane.WARNING_MESSAGE);
        } else {
            // Check if a row is actually selected
            if (selectedRow >= 0) {
                // Confirm before deleting
                int confirm = JOptionPane.showConfirmDialog(this,
                        "Are you sure you want to delete this product?",
                        "Confirm Deletion", JOptionPane.YES_NO_OPTION);

                // If the user confirms
                if (confirm == JOptionPane.YES_OPTION) {
                    // Get the table's model
                    DefaultTableModel model = (DefaultTableModel) tblmainTable.getModel();

                    // Get the product number from the table
                    int productNumToDelete = Integer.parseInt(model.getValueAt(selectedRow, 0).toString());

                    // Find and remove the product from the productList
                    for (int i = 0; i < productList.size(); i++) {
                        if (productList.get(i).getProductNum() == productNumToDelete) {
                            productList.remove(i);
                            break; // Break the loop once the product is found and removed
                        }
                    }

                    // Remove the selected row from the model
                    model.removeRow(selectedRow);

                    // Show a success message
                    JOptionPane.showMessageDialog(this, "Product deleted successfully.");
                }
            } else {
                // If no row is selected
                JOptionPane.showMessageDialog(this,
                        "Please select a product to delete.",
                        "No Selection", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_jbDeleteActionPerformed

    /**
     * This method is called when the "Add" button is clicked. It adds a new
     * product to the table and the productList after validating the input
     * fields.
     *
     * @param evt The ActionEvent object containing details about the button
     * click event.
     */
    private void addButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButton3ActionPerformed

        // This method is called when the add button is clicked
        // Get the table model
        DefaultTableModel tableModel = (DefaultTableModel) tblmainTable.getModel();

        try {
            //get fields
            String productNumStr = tfProductNoAdd.getText();
            String brandName = tfBrandNameAdd.getText();
            String keyIngredient = tfKeyAdd.getText();
            String category = (String) cbCategoryAdd.getSelectedItem();
            String priceStr = tfPriceAdd.getText();
            String quantityStr = tfQuantityAdd.getText();
            String manufacturer = tfManufacturerAdd.getText();
            String mfdDateStr = tfMfdDateAdd.getText();

            if (productNumStr.isEmpty()) {
                throw new IllegalArgumentException(StringUtil.ERROR_EMPTY_PRODUCT_NUMBER);
            }
            if (brandName.isEmpty()) {
                throw new IllegalArgumentException(StringUtil.ERROR_EMPTY_BRAND_NAME);
            }
            if (keyIngredient.isEmpty()) {
                throw new IllegalArgumentException(StringUtil.ERROR_EMPTY_KEY_INGREDIENT);
            }
            if (category == null) {
                throw new IllegalArgumentException(StringUtil.ERROR_EMPTY_CATEGORY);
            }
            if (priceStr.isEmpty()) {
                throw new IllegalArgumentException(StringUtil.ERROR_EMPTY_PRICE);
            }
            if (quantityStr.isEmpty()) {
                throw new IllegalArgumentException(StringUtil.ERROR_EMPTY_QUANTITY);
            }
            if (manufacturer.isEmpty()) {
                throw new IllegalArgumentException(StringUtil.ERROR_EMPTY_MANUFACTURER);
            }
            if (mfdDateStr.isEmpty()) {
                throw new IllegalArgumentException(StringUtil.ERROR_EMPTY_MANUFACTURED_DATE);
            }

            // Parse the numeric fields
            int productNum = Integer.parseInt(productNumStr);
            double price = Double.parseDouble(priceStr);
            int quantity = Integer.parseInt(quantityStr);
            int mfdDate = Integer.parseInt(mfdDateStr);

            // Check for existing values in the table based on product number
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                int existingProductNum = Integer.parseInt(tableModel.getValueAt(i, 0).toString());

                if (existingProductNum == productNum) {
                    throw new IllegalArgumentException(StringUtil.ERROR_PRODUCT_NUMBER_EXISTS);
                }
            }

            /*  [A-Z] matches any uppercase letter.
                [a-z]* matches zero or more lowercase letters.
                \\s[A-Z][a-z]* matches a space followed by an uppercase letter and zero or more lowercase letters.
                The * after the parentheses means that this pattern 
               (an uppercase letter followed by zero or more lowercase letters) can repeat zero or more times.*/
            if (!brandName.matches("([A-Z][a-z]*)(\\s[A-Z][a-z]*)*")) {
                throw new IllegalArgumentException(StringUtil.ERROR_INVALID_BRAND_NAME_FORMAT);
            }

            if (productNum == -1) {
                throw new IllegalArgumentException(StringUtil.ERROR_INVALID_PRODUCT_NUMBER);
            }

            if (!keyIngredient.matches("[a-zA-Z\\s',-]+")) {
                throw new IllegalArgumentException(StringUtil.ERROR_INVALID_KEY_INGREDIENTS_FORMAT);
            }

            if (productNum == 0) {
                throw new IllegalArgumentException(StringUtil.ERROR_INVALID_PRODUCT_NUMBER_ZERO);
            }

            if (price < 0) {
                throw new IllegalArgumentException(StringUtil.ERROR_INVALID_PRICE_NEGATIVE);
            }

            if (quantity < 0) {
                throw new IllegalArgumentException(StringUtil.ERROR_INVALID_QUANTITY_NEGATIVE);
            }

            int currentYear = Calendar.getInstance().get(java.util.Calendar.YEAR); // Get current year

            // Check if the year is within a valid range
            if (mfdDate < 1900 || mfdDate > currentYear) {
                throw new IllegalArgumentException("Manufactured date must be a year between 1900 and " + currentYear + ".");
            }

            /*checks if the keyIngredient string matches a specific pattern. 
            a-z: Any lowercase letter
            A-Z: Any uppercase letter
            \\s: Any whitespace character (like spaces, tabs, or line breaks)
            ',-: The characters comma, apostrophe, and hyphen
              +: One or more of the preceding element*/
            if (!manufacturer.matches("[a-zA-Z\\s'-]+")) {
                throw new IllegalArgumentException("Manufacturer must contain only letters.");
            }

            // Create a new Product object with the provided details
            Product newProduct = new Product(productNum, brandName, keyIngredient,
                    category, price, quantity,
                    manufacturer, mfdDate);

            // Add the new product to the productList
            productList.add(newProduct);

            // Print the productList to the console for debugging purposes
            System.out.println(productList);

            // Prepare the data for the new row in the table
            Object[] data = {productNum, brandName, keyIngredient, category, price, quantity, manufacturer, mfdDate};

            // Add the new row to the table
            tableModel.addRow(data);

            // Show a success message to the user
            JOptionPane.showMessageDialog(this, StringUtil.INFO_PRODUCT_ADDED_SUCCESSFULLY);

            // Handle exceptions
        } catch (NumberFormatException e) {
            // Show an error message if the product number, price, quantity, or manufactured year are not valid numbers
            JOptionPane.showMessageDialog(this, StringUtil.ERROR_NUMBER_FORMAT_EXCEPTION,
                    "Validation Error", JOptionPane.ERROR_MESSAGE);
        } catch (IllegalArgumentException e) {
            // Show an error message if an illegal argument was provided
            JOptionPane.showMessageDialog(this, e.getMessage(),
                    "Validation Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            // Show an error message if an unexpected error occurred
            JOptionPane.showMessageDialog(this, StringUtil.ERROR_UNEXPECTED + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addButton3ActionPerformed

    /**
     * This method is called when the "Add Back" button is clicked. It hides the
     * 'Add' panel and shows the 'Main' panel, effectively taking the user back
     * to the main screen. It also clears all the input fields in the 'Add'
     * panel.
     *
     * @param evt The ActionEvent object containing details about the button
     * click event.
     */
    private void addBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBackButtonActionPerformed
        // TODO add your handling code here:
        pnAdd.setVisible(false);
        pnMain.setVisible(true);

        //To clear all the input fields
        tfProductNoAdd.setText("");
        tfBrandNameAdd.setText("");
        tfKeyAdd.setText("");
        tfPriceAdd.setText("");
        tfQuantityAdd.setText("");
        tfManufacturerAdd.setText("");
        tfMfdDateAdd.setText("");


    }//GEN-LAST:event_addBackButtonActionPerformed

    /**
     * This method is triggered when the "Update" button is clicked. It updates
     * the selected product's details in the table after performing necessary
     * validations.
     *
     * @param evt The ActionEvent object that contains details about the button
     * click event.
     */
    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        // Check if a row is selected in the main table
        int selectedRow = tblmainTable.getSelectedRow();
        if (selectedRow >= 0) {  // A row is selected
            DefaultTableModel tableModel = (DefaultTableModel) tblmainTable.getModel();

            try {
                // Parse and retrieve data from input fields
                int productNum = Integer.parseInt(tfProductNoUpdate.getText());
                String brandName = tfBrandNameUpdate.getText();
                String keyIngredient = tfKeyAddUpdate.getText();
                String category = (String) cbCategoryUpdate.getSelectedItem();
                double price = Double.parseDouble(tfPriceUpdate.getText());
                int quantity = Integer.parseInt(tfQuantityUpdate.getText());
                String manufacturer = tfManufacturerUpdate.getText();
                int mfdDate = Integer.parseInt(tfMfdDateUpdate.getText());

                // Loop through table rows to check for duplicate product numbers or brand names
                for (int i = 0; i < tableModel.getRowCount(); i++) {
                    int existingProductNum = Integer.parseInt(tableModel.getValueAt(i, 0).toString());
                    String existingBrandName = tableModel.getValueAt(i, 1).toString();

                    // Throw exception if duplicate product number or brand name is found
                    if (existingProductNum == productNum && i != selectedRow) {
                        throw new IllegalArgumentException("A product with the same product number already exists.");
                    }
                    if (existingBrandName.equalsIgnoreCase(brandName) && i != selectedRow) {
                        throw new IllegalArgumentException("A product with the same brand name already exists.");
                    }
                }

                // Validate input fields for correct values and formats
                if (productNum == -1 || brandName.isEmpty() || keyIngredient.isEmpty()
                        || category == null || price <= 0 || quantity <= 0
                        || manufacturer.isEmpty() || mfdDate <= 0) {
                    throw new IllegalArgumentException("Please fill in all fields with valid information.");
                }

                // Additional validations for brand name, key ingredients, and manufacturer fields
                if (!brandName.matches("([A-Z][a-z]*)(\\s[A-Z][a-z]*)*")) {
                    throw new IllegalArgumentException("Product Name must "
                            + "contain only letters. The first letter of Brand Name must be capital");
                }
                if (!keyIngredient.matches("[a-zA-Z\\s',-]+")) {
                    throw new IllegalArgumentException("Key Ingredients cannot contain numbers.");
                }
                if (!manufacturer.matches("[a-zA-Z\\s',-]+")) {
                    throw new IllegalArgumentException("Manufacturer must contain only letters.");
                }

                // Loop through productList to find and update the product details
                for (Product product : productList) {
                    if (product.getProductNum() == productNum) {
                        // Set the updated product details
                        product.setBrandName(brandName);
                        product.setKeyIngredient(keyIngredient);
                        product.setCategory(category);
                        product.setPrice(price);
                        product.setQuantity(quantity);
                        product.setManufacturer(manufacturer);
                        product.setMfdDate(mfdDate);

                        // Update the row in the table model with the new values
                        tableModel.setValueAt(productNum, selectedRow, 0);
                        tableModel.setValueAt(brandName, selectedRow, 1);
                        tableModel.setValueAt(keyIngredient, selectedRow, 2);
                        tableModel.setValueAt(category, selectedRow, 3);
                        tableModel.setValueAt(price, selectedRow, 4);
                        tableModel.setValueAt(quantity, selectedRow, 5);
                        tableModel.setValueAt(manufacturer, selectedRow, 6);
                        tableModel.setValueAt(mfdDate, selectedRow, 7);

                        // Display success message
                        JOptionPane.showMessageDialog(this, "Product updated successfully.");
                        return; // Exit the loop and method
                    }
                }

                // Display success message (this line seems redundant and might never be reached)
                JOptionPane.showMessageDialog(this, "Product updated successfully.");

            } catch (NumberFormatException e) {
                // Handle and display error message for number format exceptions
                JOptionPane.showMessageDialog(this, "Invalid input"
                        + " format. Please check your data.", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (IllegalArgumentException e) {
                // Handle and display error message for illegal argument exceptions
                JOptionPane.showMessageDialog(this, e.getMessage(), "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Display error message if no row is selected for update
            JOptionPane.showMessageDialog(this, "Please select a row to update.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_UpdateButtonActionPerformed

    /**
     * This method is called when the "Update Back" button is clicked. It hides
     * the 'Update' panel and shows the 'Main' panel, effectively navigating the
     * user back to the main screen.
     *
     * @param evt The ActionEvent object containing details about the button
     * click event.
     */
    private void updateBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBackButtonActionPerformed
        // TODO add your handling code here:
        pnUpdate.setVisible(false);
        pnMain.setVisible(true);
    }//GEN-LAST:event_updateBackButtonActionPerformed

    /**
     * This method is called when the "Update Clear" button is clicked. It
     * clears all the input fields in the 'Update' panel, effectively resetting
     * the form.
     *
     * @param evt The ActionEvent object containing details about the button
     * click event.
     */
    private void updateClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateClearButtonActionPerformed
        // TODO add your handling code here:
        tfProductNoUpdate.setText("");
        tfBrandNameUpdate.setText("");
        tfKeyAddUpdate.setText("");
        tfPriceUpdate.setText("");
        tfQuantityUpdate.setText("");
        tfManufacturerUpdate.setText("");
        tfMfdDateUpdate.setText("");

    }//GEN-LAST:event_updateClearButtonActionPerformed

    /**
     * This method is called when a mouse click event occurs on tblmainTable. It
     * is responsible for updating the UI components with the data from the
     * selected row.
     *
     * @param evt The MouseEvent object containing details about the mouse click
     * event.
     */
    private void tblmainTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblmainTableMouseClicked
        // Get the index of the selected row in the table
        int selectedRow = tblmainTable.getSelectedRow();

        // Check if a row is actually selected (selectedRow is -1 if no row is selected)
        if (selectedRow >= 0) {
            // Get the table model associated with tblmainTable
            DefaultTableModel tableModel = (DefaultTableModel) tblmainTable.getModel();

            // Set the text fields and combo box with values from the selected row
            // Each line gets the value from a specific column (0-indexed) and converts it to a string
            tfProductNoUpdate.setText(tableModel.getValueAt(selectedRow, 0).toString());     // Column 0: Product Number
            tfBrandNameUpdate.setText(tableModel.getValueAt(selectedRow, 1).toString());     // Column 1: Brand Name
            tfKeyAddUpdate.setText(tableModel.getValueAt(selectedRow, 2).toString());        // Column 2: Key Ingredient
            cbCategoryUpdate.setSelectedItem(tableModel.getValueAt(selectedRow, 3).toString()); // Column 3: Category
            tfPriceUpdate.setText(tableModel.getValueAt(selectedRow, 4).toString());         // Column 4: Price
            tfQuantityUpdate.setText(tableModel.getValueAt(selectedRow, 5).toString());      // Column 5: Quantity
            tfManufacturerUpdate.setText(tableModel.getValueAt(selectedRow, 6).toString());  // Column 6: Manufacturer
            tfMfdDateUpdate.setText(tableModel.getValueAt(selectedRow, 7).toString());       // Column 7: Manufacturing Date
        }
    }//GEN-LAST:event_tblmainTableMouseClicked

    /**
     * This method is called when the search button is clicked. It searches for
     * a product by its brand name and updates the GUI table with the search
     * result.
     *
     * @param evt The ActionEvent object containing details about the button
     * click event.
     */
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // Retrieve the search brand name entered by the user
        String searchBrandName = jtSearch.getText();

        // Check if the search term is not empty and matches the valid pattern
        if (!searchBrandName.isEmpty() && searchBrandName.matches("[a-zA-Z\\s',-]+")) {
            // Sort the productList by brand name
            controller.sortByBrandName(productList);

            // Perform a binary search to find the product by brand name
            Product foundProduct = controller.binarySearchByBrandName(productList, searchBrandName);

            if (foundProduct != null) {
                // Clear existing data from the table
                DefaultTableModel tableModel = (DefaultTableModel) tblmainTable.getModel();
                tableModel.setRowCount(0); // This clears all rows in the table

                // Create an array of the product details to be added as a row in the table
                Object[] rowData = new Object[]{
                    foundProduct.getProductNum(),
                    foundProduct.getBrandName(),
                    foundProduct.getKeyIngredient(),
                    foundProduct.getCategory(),
                    foundProduct.getPrice(),
                    foundProduct.getQuantity(),
                    foundProduct.getManufacturer(),
                    foundProduct.getMfdDate()
                };
                // Add the row data to the table
                tableModel.addRow(rowData);

                // Display a message indicating the product was found and displayed
                JOptionPane.showMessageDialog(this, "Product found and displayed.",
                        "Search Result", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // Display a message if the product was not found
                JOptionPane.showMessageDialog(this, "Product not found",
                        "Search", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            // Display an error message if the input is invalid
            JOptionPane.showMessageDialog(this, "Please enter a valid product name to search.", "Input Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    /**
     * This method is called when the "Sort by Product Number" button is
     * clicked. It sorts the list of products by their product number and
     * updates the table in the GUI.
     *
     * @param evt The ActionEvent object containing details about the button
     * click event.
     */
    private void SortProductNumButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortProductNumButtonActionPerformed
        // Call the sortByProductNum method in the controller to sort the productList
        controller.sortByProductNum(productList);

        // Get the table model associated with tblmainTable
        DefaultTableModel model = (DefaultTableModel) tblmainTable.getModel();

        // Clear existing data from the table
        model.setRowCount(0);

        // Iterate over the sorted productList
        for (Product product : productList) {
            // Create an array with the product's details
            Object[] rowData = new Object[]{
                product.getProductNum(), // Product Number
                product.getBrandName(), // Brand Name
                product.getKeyIngredient(), // Key Ingredient
                product.getCategory(), // Category
                product.getPrice(), // Price
                product.getQuantity(), // Quantity
                product.getManufacturer(), // Manufacturer
                product.getMfdDate() // Manufacturing Date
            };

            // Add a row to the table model with the product's data
            model.addRow(rowData);
        }
    }//GEN-LAST:event_SortProductNumButtonActionPerformed

    /**
     * This method is triggered when the "Sort by Brand Name" button is clicked.
     * It sorts the list of products by their brand names and updates the table
     * in the GUI accordingly.
     *
     * @param evt The ActionEvent object that contains details about the button
     * click event.
     */
    private void SortBrandNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortBrandNameButtonActionPerformed
        // Call the sortByBrandName method in the controller to sort the productList by brand name
        controller.sortByBrandName(productList);
        DefaultTableModel model = (DefaultTableModel) tblmainTable.getModel();

        // Clear all existing rows in the table
        model.setRowCount(0);

        // Loop through each product in the sorted productList
        for (Product product : productList) {
            model.addRow(new Object[]{
                product.getProductNum(),
                product.getBrandName(),
                product.getKeyIngredient(),
                product.getCategory(),
                product.getPrice(),
                product.getQuantity(),
                product.getManufacturer(),
                product.getMfdDate(),});

        }
    }//GEN-LAST:event_SortBrandNameButtonActionPerformed

    /**
     * The main method is the entry point of the application. It sets the look
     * and feel of the GUI and creates the main application window.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KeshCare.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KeshCare.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KeshCare.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KeshCare.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KeshCare().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SortBrandNameButton;
    private javax.swing.JButton SortPriceButton;
    private javax.swing.JButton SortProductNumButton;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JButton addBackButton;
    private javax.swing.JButton addButton;
    private javax.swing.JButton addButton3;
    private javax.swing.JLabel brandNameAdd;
    private javax.swing.JLabel categoryAdd;
    private javax.swing.JComboBox<String> cbCategoryAdd;
    private javax.swing.JComboBox<String> cbCategoryUpdate;
    private javax.swing.JComboBox<String> cbSortCategory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton jbDelete;
    private javax.swing.JButton jbUpdate;
    private javax.swing.JButton jbWelcome;
    private javax.swing.JLabel jlKeshCareTitle;
    private javax.swing.JLabel jlLogo;
    private javax.swing.JLabel jlSubtitle;
    private javax.swing.JTextField jtSearch;
    private javax.swing.JLabel keyIngredientsAdd;
    private javax.swing.JLabel logo;
    private javax.swing.JLabel manufacturer1;
    private javax.swing.JLabel mfdDate1;
    private javax.swing.JPanel pnAdd;
    private javax.swing.JPanel pnMain;
    private javax.swing.JPanel pnUpdate;
    private javax.swing.JPanel pnWelcome;
    private javax.swing.JLabel priceAdd;
    private javax.swing.JLabel productNoAdd;
    private javax.swing.JLabel quantity1;
    private javax.swing.JButton searchButton;
    private javax.swing.JTable tblmainTable;
    private javax.swing.JTextField tfBrandNameAdd;
    private javax.swing.JTextField tfBrandNameUpdate;
    private javax.swing.JTextField tfKeyAdd;
    private javax.swing.JTextField tfKeyAddUpdate;
    private javax.swing.JTextField tfManufacturerAdd;
    private javax.swing.JTextField tfManufacturerUpdate;
    private javax.swing.JTextField tfMfdDateAdd;
    private javax.swing.JTextField tfMfdDateUpdate;
    private javax.swing.JTextField tfPriceAdd;
    private javax.swing.JTextField tfPriceUpdate;
    private javax.swing.JTextField tfProductNoAdd;
    private javax.swing.JTextField tfProductNoUpdate;
    private javax.swing.JTextField tfQuantityAdd;
    private javax.swing.JTextField tfQuantityUpdate;
    private javax.swing.JLabel title;
    private javax.swing.JButton updateBackButton;
    private javax.swing.JLabel updateBrandName;
    private javax.swing.JLabel updateCategory;
    private javax.swing.JButton updateClearButton;
    private javax.swing.JLabel updateKeyIngredients;
    private javax.swing.JLabel updateManufacturer;
    private javax.swing.JLabel updateMfdDate;
    private javax.swing.JLabel updatePrice;
    private javax.swing.JLabel updateProductNo;
    private javax.swing.JLabel updateQuantity;
    // End of variables declaration//GEN-END:variables
}
